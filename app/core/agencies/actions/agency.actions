"use server";
import { createClient } from "@supabase/supabase-js";
import { randomUUID } from "crypto";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
);

export async function getAgencies() {
  const { data, error } = await supabase
    .from("core_agencies")
    .select("*, core_brands(brand_name)");
  if (error) throw error;
  return data;
}

export async function createAgency(payload: any) {
  const { error } = await supabase.from("core_agencies").insert([
    {
      name: payload.name,
      email: payload.email,
      country: payload.country,
      domain: payload.domain,
      brand_id: payload.brand_id,
      logo_url: payload.logo_url,
      is_active: true,
      status: "Invitada",
    },
  ]);
  if (error) throw error;
}

export async function toggleAgency(id: string, is_active: boolean) {
  const { error } = await supabase
    .from("core_agencies")
    .update({ is_active })
    .eq("id", id);
  if (error) throw error;
}

export async function updateStatus(id: string, status: string) {
  const { error } = await supabase
    .from("core_agencies")
    .update({ status })
    .eq("id", id);
  if (error) throw error;
}

export async function deleteAgency(id: string) {
  const { error } = await supabase.from("core_agencies").delete().eq("id", id);
  if (error) throw error;
}

// ðŸ†• Generar invitaciÃ³n
export async function generateInvite(id: string) {
  const token = randomUUID();
  const inviteUrl = `${process.env.NEXT_PUBLIC_SITE_URL}/agency/invite?token=${token}`;

  const { error } = await supabase
    .from("core_agencies")
    .update({
      invitation_token: token,
      invitation_link: inviteUrl,
      status: "Pendiente",
    })
    .eq("id", id);

  if (error) throw error;
  return inviteUrl;
}
